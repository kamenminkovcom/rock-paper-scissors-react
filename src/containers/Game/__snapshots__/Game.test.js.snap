// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Game/> Should render correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Game />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ScoreBar
          cpuScores={0}
          playerScores={0}
/>,
        <div
          className="game-container"
>
          <Hand
                    handType="rules"
                    isCpu={false}
          />
          <Desk
                    history={Array []}
                    isPlaying={false}
                    playFunc={[Function]}
          />
          <Hand
                    handType="rules"
          />
</div>,
        <WithCondition
          choseHandType={[Function]}
          handTypes={
                    Object {
                              "paper": "paper",
                              "rock": "rock",
                              "scissors": "scissors",
                            }
          }
          shouldShow={false}
/>,
        "}",
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "cpuScores": 0,
          "playerScores": 0,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Hand
              handType="rules"
              isCpu={false}
/>,
            <Desk
              history={Array []}
              isPlaying={false}
              playFunc={[Function]}
/>,
            <Hand
              handType="rules"
/>,
          ],
          "className": "game-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "handType": "rules",
              "isCpu": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "history": Array [],
              "isPlaying": false,
              "playFunc": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "handType": "rules",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "choseHandType": [Function],
          "handTypes": Object {
            "paper": "paper",
            "rock": "rock",
            "scissors": "scissors",
          },
          "shouldShow": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "}",
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ScoreBar
            cpuScores={0}
            playerScores={0}
/>,
          <div
            className="game-container"
>
            <Hand
                        handType="rules"
                        isCpu={false}
            />
            <Desk
                        history={Array []}
                        isPlaying={false}
                        playFunc={[Function]}
            />
            <Hand
                        handType="rules"
            />
</div>,
          <WithCondition
            choseHandType={[Function]}
            handTypes={
                        Object {
                                    "paper": "paper",
                                    "rock": "rock",
                                    "scissors": "scissors",
                                  }
            }
            shouldShow={false}
/>,
          "}",
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "cpuScores": 0,
            "playerScores": 0,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Hand
                handType="rules"
                isCpu={false}
/>,
              <Desk
                history={Array []}
                isPlaying={false}
                playFunc={[Function]}
/>,
              <Hand
                handType="rules"
/>,
            ],
            "className": "game-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "handType": "rules",
                "isCpu": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "history": Array [],
                "isPlaying": false,
                "playFunc": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "handType": "rules",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "choseHandType": [Function],
            "handTypes": Object {
              "paper": "paper",
              "rock": "rock",
              "scissors": "scissors",
            },
            "shouldShow": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "}",
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
